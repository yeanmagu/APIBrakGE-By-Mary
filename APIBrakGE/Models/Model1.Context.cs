//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace APIBrakGE.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbBrakGEEntities : DbContext
    {
        public dbBrakGEEntities()
            : base("name=dbBrakGEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actas> Actas { get; set; }
        public virtual DbSet<AcuerdoPagoCuentasPendientes> AcuerdoPagoCuentasPendientes { get; set; }
        public virtual DbSet<Bodega> Bodega { get; set; }
        public virtual DbSet<Brief> Brief { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<ControlDeProcesos> ControlDeProcesos { get; set; }
        public virtual DbSet<ControlEntregasInternas> ControlEntregasInternas { get; set; }
        public virtual DbSet<CuentasPendientes> CuentasPendientes { get; set; }
        public virtual DbSet<CuotaPago> CuotaPago { get; set; }
        public virtual DbSet<CuotasPagoPendiente> CuotasPagoPendiente { get; set; }
        public virtual DbSet<DetalleActa> DetalleActa { get; set; }
        public virtual DbSet<DetalleDocumento> DetalleDocumento { get; set; }
        public virtual DbSet<DetalleRemisiones> DetalleRemisiones { get; set; }
        public virtual DbSet<Documentos> Documentos { get; set; }
        public virtual DbSet<DPTO> DPTO { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<EstadoDocumento> EstadoDocumento { get; set; }
        public virtual DbSet<EstadoEnvio> EstadoEnvio { get; set; }
        public virtual DbSet<FomaDePago> FomaDePago { get; set; }
        public virtual DbSet<FormaPagoPendientes> FormaPagoPendientes { get; set; }
        public virtual DbSet<FotosBrief> FotosBrief { get; set; }
        public virtual DbSet<FotosItems> FotosItems { get; set; }
        public virtual DbSet<Grupo> Grupo { get; set; }
        public virtual DbSet<Inventario> Inventario { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<Iva> Iva { get; set; }
        public virtual DbSet<Marcas> Marcas { get; set; }
        public virtual DbSet<Materiales> Materiales { get; set; }
        public virtual DbSet<MaterialesActaDetalle> MaterialesActaDetalle { get; set; }
        public virtual DbSet<Modificaciones> Modificaciones { get; set; }
        public virtual DbSet<ModoPago> ModoPago { get; set; }
        public virtual DbSet<MotivoModificaciones> MotivoModificaciones { get; set; }
        public virtual DbSet<Municipio> Municipio { get; set; }
        public virtual DbSet<Nomina> Nomina { get; set; }
        public virtual DbSet<Paises> Paises { get; set; }
        public virtual DbSet<Perfiles> Perfiles { get; set; }
        public virtual DbSet<Personas> Personas { get; set; }
        public virtual DbSet<PlanPagoCredito> PlanPagoCredito { get; set; }
        public virtual DbSet<Procesos> Procesos { get; set; }
        public virtual DbSet<ProgramacionTarea> ProgramacionTarea { get; set; }
        public virtual DbSet<RecibosCaja> RecibosCaja { get; set; }
        public virtual DbSet<RecibosPago> RecibosPago { get; set; }
        public virtual DbSet<RemisionesExternas> RemisionesExternas { get; set; }
        public virtual DbSet<SubGrupo> SubGrupo { get; set; }
        public virtual DbSet<Sw> Sw { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Talla> Talla { get; set; }
        public virtual DbSet<TipoActa> TipoActa { get; set; }
        public virtual DbSet<TipoCliente> TipoCliente { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumento { get; set; }
        public virtual DbSet<TipoMOntaje> TipoMOntaje { get; set; }
        public virtual DbSet<TipoMovimiento> TipoMovimiento { get; set; }
        public virtual DbSet<TipoPersona> TipoPersona { get; set; }
        public virtual DbSet<TipoProceso> TipoProceso { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<DatosEmpresa_Result> DatosEmpresa(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DatosEmpresa_Result>("DatosEmpresa", idParameter);
        }
    
        public virtual ObjectResult<GenerarGanancias_Result> GenerarGanancias(Nullable<int> documento, Nullable<System.DateTime> fechaIn, Nullable<System.DateTime> fechaFin)
        {
            var documentoParameter = documento.HasValue ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(int));
    
            var fechaInParameter = fechaIn.HasValue ?
                new ObjectParameter("fechaIn", fechaIn) :
                new ObjectParameter("fechaIn", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("fechaFin", fechaFin) :
                new ObjectParameter("fechaFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerarGanancias_Result>("GenerarGanancias", documentoParameter, fechaInParameter, fechaFinParameter);
        }
    
        public virtual ObjectResult<Sp_AcuerdoPago_Result> Sp_AcuerdoPago(Nullable<int> nroAcuerdo)
        {
            var nroAcuerdoParameter = nroAcuerdo.HasValue ?
                new ObjectParameter("NroAcuerdo", nroAcuerdo) :
                new ObjectParameter("NroAcuerdo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AcuerdoPago_Result>("Sp_AcuerdoPago", nroAcuerdoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_Existencia_Result> SP_Existencia(Nullable<int> bod, string codigoItem)
        {
            var bodParameter = bod.HasValue ?
                new ObjectParameter("bod", bod) :
                new ObjectParameter("bod", typeof(int));
    
            var codigoItemParameter = codigoItem != null ?
                new ObjectParameter("codigoItem", codigoItem) :
                new ObjectParameter("codigoItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Existencia_Result>("SP_Existencia", bodParameter, codigoItemParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Sp_ImprmirRecibo_Result> Sp_ImprmirRecibo(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ImprmirRecibo_Result>("Sp_ImprmirRecibo", idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Sp_Report_Doc_Result> Sp_Report_Doc(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Report_Doc_Result>("Sp_Report_Doc", idParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<TotalVentasMes_Result> TotalVentasMes(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, Nullable<int> tipoMov)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var tipoMovParameter = tipoMov.HasValue ?
                new ObjectParameter("tipoMov", tipoMov) :
                new ObjectParameter("tipoMov", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TotalVentasMes_Result>("TotalVentasMes", fechaInicialParameter, fechaFinalParameter, tipoMovParameter);
        }
    }
}
